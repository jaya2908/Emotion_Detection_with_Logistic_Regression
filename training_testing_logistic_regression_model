!pip install wordcloud
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import chardet
with open("flipkart_product.csv", 'rb') as rawdata:
    result = chardet.detect(rawdata.read(100000))
print(result['encoding'])
data.head(5)
data.isnull().sum()
#Shape of the dataFrame
data.shape
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
import numpy as np

# Load the dataset
file_path = '/content/flipkart_product.csv'
data = pd.read_csv(file_path, encoding='ISO-8859-1')

# Map 'Rate' to sentiment (1-2: Negative, 3: Neutral, 4-5: Positive)
def map_sentiment(rate):
    if rate in ['1', '2']:
        return 'Negative'
    elif rate == '3':
        return 'Neutral'
    elif rate in ['4', '5']:
        return 'Positive'
    return np.nan

# Clean and prepare data
data['Sentiment'] = data['Rate'].apply(map_sentiment)
data = data.dropna(subset=['Review', 'Sentiment'])

# Split data into training and testing sets
X = data['Review']
y = data['Sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert text data to numerical features using TF-IDF
tfidf = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Train a logistic regression model
logreg = LogisticRegression(max_iter=1000, random_state=42)
logreg.fit(X_train_tfidf, y_train)

# Predict and evaluate
y_pred = logreg.predict(X_test_tfidf)
report = classification_report(y_test, y_pred)

# Print the evaluation report
print(report)
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(y_test, y_pred, labels=['Negative', 'Neutral', 'Positive'])

# Visualize the confusion matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Negative', 'Neutral', 'Positive'], yticklabels=['Negative', 'Neutral', 'Positive'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()
# Predict and evaluate
y_pred = logreg.predict(X_test_tfidf)

# Calculate and print accuracy
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Print detailed classification report
report = classification_report(y_test, y_pred)
print(report)
# Predict on both training and testing data
y_train_pred = logreg.predict(X_train_tfidf)
y_test_pred = logreg.predict(X_test_tfidf)

# Calculate accuracies
from sklearn.metrics import accuracy_score
train_accuracy = accuracy_score(y_train, y_train_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)

# Print accuracies
print(f"Training Accuracy: {train_accuracy:.2f}")
print(f"Testing Accuracy: {test_accuracy:.2f}")
import joblib

# Save the trained model
joblib.dump(logreg, 'sentiment_logreg_model.pkl')

# Save the TF-IDF vectorizer
joblib.dump(tfidf, 'tfidf_vectorizer.pkl')

print("Model and vectorizer saved successfully!")
